// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SolidCRM.Data;

namespace SolidCRM.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SolidCRM.Models.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AddressType");
                });

            modelBuilder.Entity("SolidCRM.Models.AppSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("AppShortName")
                        .HasMaxLength(50);

                    b.Property<string>("AppVersion")
                        .HasMaxLength(15);

                    b.Property<string>("FooterText")
                        .HasMaxLength(150);

                    b.Property<bool>("IsBoxedLayout");

                    b.Property<bool>("IsFixedLayout");

                    b.Property<bool>("IsToggleRightSidebar");

                    b.Property<bool>("IsToggleSidebar");

                    b.Property<string>("Skin")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("AppSetting");
                });

            modelBuilder.Entity("SolidCRM.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddedBy");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModied")
                        .HasColumnType("datetime");

                    b.Property<string>("Details")
                        .IsRequired();

                    b.Property<bool>("IsPublished");

                    b.Property<int?>("ModifiedBy");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int?>("ViewCount");

                    b.HasKey("Id");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("SolidCRM.Models.BlogCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddedBy");

                    b.Property<int>("BlogId");

                    b.Property<int>("CategoryId");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModied")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BlogCategory");
                });

            modelBuilder.Entity("SolidCRM.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryImage")
                        .HasMaxLength(200);

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("ParentId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("SolidCRM.Models.ClientAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressTypeId");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("CountryId");

                    b.Property<string>("State")
                        .HasMaxLength(100);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("CountryId");

                    b.ToTable("ClientAddress");
                });

            modelBuilder.Entity("SolidCRM.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About")
                        .IsRequired();

                    b.Property<string>("Fax")
                        .HasMaxLength(15);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasMaxLength(13);

                    b.Property<string>("Website")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("SolidCRM.Models.CompanyClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<int>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<int>("CurrencyId");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("Latitude")
                        .HasMaxLength(50);

                    b.Property<string>("Longitude")
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasMaxLength(15);

                    b.Property<int?>("UserId");

                    b.Property<string>("VATNumber")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyClient");
                });

            modelBuilder.Entity("SolidCRM.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyClientId");

                    b.Property<int>("ContractStatusId");

                    b.Property<int>("ContractTypeId");

                    b.Property<decimal>("ContractValue");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyClientId");

                    b.HasIndex("ContractStatusId");

                    b.HasIndex("ContractTypeId");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("SolidCRM.Models.ContractStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ContractStatus");
                });

            modelBuilder.Entity("SolidCRM.Models.ContractType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ContractType");
                });

            modelBuilder.Entity("SolidCRM.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("SolidCRM.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("SolidCRM.Models.Direction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Direction");
                });

            modelBuilder.Entity("SolidCRM.Models.FileManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FileExtension")
                        .HasMaxLength(10);

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("Tags")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FileManager");
                });

            modelBuilder.Entity("SolidCRM.Models.GeneralSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("SettingGroup")
                        .HasMaxLength(50);

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("GeneralSetting");
                });

            modelBuilder.Entity("SolidCRM.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<DateTime>("BillDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ClientAddressId");

                    b.Property<int?>("CompanyId");

                    b.Property<int>("CountryId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(40);

                    b.Property<string>("Mobile")
                        .HasMaxLength(15);

                    b.Property<string>("OtherInvoiceCode")
                        .HasMaxLength(50);

                    b.Property<int>("PaymentModeId");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("ClientAddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("PaymentModeId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("SolidCRM.Models.InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Adjustment");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<decimal?>("Discount");

                    b.Property<int>("InvoiceId");

                    b.Property<decimal>("Quantity");

                    b.Property<int>("QuantityUnitId");

                    b.Property<decimal?>("Tax");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("Total");

                    b.Property<decimal>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("QuantityUnitId");

                    b.ToTable("InvoiceItem");
                });

            modelBuilder.Entity("SolidCRM.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("SolidCRM.Models.Lead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<int?>("AssignedToUserId");

                    b.Property<string>("Company")
                        .HasMaxLength(100);

                    b.Property<int>("CountryId");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .HasMaxLength(22);

                    b.Property<int>("LeadStatusId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("OnDated")
                        .HasColumnType("datetime");

                    b.Property<string>("Phone")
                        .HasMaxLength(15);

                    b.Property<string>("Position")
                        .HasMaxLength(100);

                    b.Property<int>("SourceId");

                    b.Property<string>("Website")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("CountryId");

                    b.HasIndex("LeadStatusId");

                    b.HasIndex("SourceId");

                    b.ToTable("Lead");
                });

            modelBuilder.Entity("SolidCRM.Models.LeadStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("LeadStatus");
                });

            modelBuilder.Entity("SolidCRM.Models.LedgerAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountCode")
                        .HasMaxLength(50);

                    b.Property<string>("AccountColor")
                        .HasMaxLength(10);

                    b.Property<int?>("AddedBy");

                    b.Property<int>("CompanyId");

                    b.Property<int>("CurrencyId");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<int?>("ParentId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ParentId");

                    b.ToTable("LedgerAccount");
                });

            modelBuilder.Entity("SolidCRM.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MenuIcon")
                        .HasMaxLength(100);

                    b.Property<string>("MenuText")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("MenuURL")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int?>("ParentId");

                    b.Property<int?>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("SolidCRM.Models.MenuPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsCreate");

                    b.Property<bool>("IsDelete");

                    b.Property<bool>("IsRead");

                    b.Property<bool>("IsUpdate");

                    b.Property<int?>("MenuId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("SortOrder");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("MenuPermission");
                });

            modelBuilder.Entity("SolidCRM.Models.NewsMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddedBy");

                    b.Property<int>("BlogId");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModied")
                        .HasColumnType("datetime");

                    b.Property<int?>("DisplaySortOrder");

                    b.Property<string>("MediaFile")
                        .HasMaxLength(100);

                    b.Property<int?>("ModifiedBy");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("NewsMedia");
                });

            modelBuilder.Entity("SolidCRM.Models.Notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddedByUserId");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModied")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("SolidCRM.Models.PaymentMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("PaymentMode");
                });

            modelBuilder.Entity("SolidCRM.Models.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("SortOrder");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Priority");
                });

            modelBuilder.Entity("SolidCRM.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddedBy");

                    b.Property<decimal?>("Amount");

                    b.Property<int?>("CompanyClientId");

                    b.Property<int>("CompanyOfficeId");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Details")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("PriorityId");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<int>("StatusId");

                    b.Property<string>("Tags")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CompanyClientId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("StatusId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("SolidCRM.Models.ProjectFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileManagerId");

                    b.Property<int>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("FileManagerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectFile");
                });

            modelBuilder.Entity("SolidCRM.Models.ProjectMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProjectId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectMember");
                });

            modelBuilder.Entity("SolidCRM.Models.ProjectMileStone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectMileStone");
                });

            modelBuilder.Entity("SolidCRM.Models.ProjectTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddedBy");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy");

                    b.Property<int?>("ParentId");

                    b.Property<int>("PriorityId");

                    b.Property<int>("ProjectId");

                    b.Property<int?>("ProjectMileStoneId");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StatusId");

                    b.Property<string>("TaskNames")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectMileStoneId");

                    b.HasIndex("StatusId");

                    b.ToTable("ProjectTask");
                });

            modelBuilder.Entity("SolidCRM.Models.QuantityUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("QuantityUnit");
                });

            modelBuilder.Entity("SolidCRM.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("SolidCRM.Models.RoleUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RoleId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("SolidCRM.Models.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Source");
                });

            modelBuilder.Entity("SolidCRM.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("SortOrder");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("SolidCRM.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddedBy");

                    b.Property<int>("CompanyClientId");

                    b.Property<int>("CompanyId");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModied")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsDelete");

                    b.Property<int?>("ModifiedBy");

                    b.Property<int>("PriorityId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StatusId");

                    b.Property<string>("TicketDetail")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("CompanyClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("StatusId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("SolidCRM.Models.TicketTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddedBy");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModied")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsDelete");

                    b.Property<int?>("ModifiedBy");

                    b.Property<int>("PriorityId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StatusId");

                    b.Property<decimal?>("TakeTimeInHour");

                    b.Property<string>("TaskDetail")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<int>("TicketId");

                    b.HasKey("Id");

                    b.HasIndex("PriorityId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketTask");
                });

            modelBuilder.Entity("SolidCRM.Models.Todo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModied")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Todo");
                });

            modelBuilder.Entity("SolidCRM.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddedBy");

                    b.Property<string>("Attachment")
                        .HasMaxLength(100);

                    b.Property<int>("CompanyId");

                    b.Property<decimal>("CreditAmount");

                    b.Property<int>("CreditLedgerAccountId");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModied")
                        .HasColumnType("datetime");

                    b.Property<decimal>("DebitAmount");

                    b.Property<int>("DebitLedgerAccountId");

                    b.Property<int?>("ModifiedBy");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreditLedgerAccountId");

                    b.HasIndex("DebitLedgerAccountId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("SolidCRM.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ChangePasswordCode")
                        .HasMaxLength(100);

                    b.Property<int?>("DirectionId");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("EmailSignature")
                        .HasMaxLength(500);

                    b.Property<string>("Facebook")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LanguageId");

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<string>("LinkedIn")
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasMaxLength(15);

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(200);

                    b.Property<string>("Skype")
                        .HasMaxLength(100);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("DirectionId");

                    b.HasIndex("LanguageId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("SolidCRM.Models.BlogCategory", b =>
                {
                    b.HasOne("SolidCRM.Models.Blog", "Blog_BlogId")
                        .WithMany("BlogCategory_BlogIds")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolidCRM.Models.Category", "Category_CategoryId")
                        .WithMany("BlogCategory_CategoryIds")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SolidCRM.Models.Category", b =>
                {
                    b.HasOne("SolidCRM.Models.Category", "Category2")
                        .WithMany("Category_ParentIds")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SolidCRM.Models.ClientAddress", b =>
                {
                    b.HasOne("SolidCRM.Models.AddressType", "AddressType_AddressTypeId")
                        .WithMany("ClientAddress_AddressTypeIds")
                        .HasForeignKey("AddressTypeId");

                    b.HasOne("SolidCRM.Models.Country", "Country_CountryId")
                        .WithMany("ClientAddress_CountryIds")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("SolidCRM.Models.CompanyClient", b =>
                {
                    b.HasOne("SolidCRM.Models.Company", "Company_CompanyId")
                        .WithMany("CompanyClient_CompanyIds")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolidCRM.Models.Country", "Country_CountryId")
                        .WithMany("CompanyClient_CountryIds")
                        .HasForeignKey("CountryId");

                    b.HasOne("SolidCRM.Models.Currency", "Currency_CurrencyId")
                        .WithMany("CompanyClient_CurrencyIds")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolidCRM.Models.User", "User_UserId")
                        .WithMany("CompanyClient_UserIds")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SolidCRM.Models.Contract", b =>
                {
                    b.HasOne("SolidCRM.Models.CompanyClient", "CompanyClient_CompanyClientId")
                        .WithMany("Contract_CompanyClientIds")
                        .HasForeignKey("CompanyClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolidCRM.Models.ContractStatus", "ContractStatus_ContractStatusId")
                        .WithMany("Contract_ContractStatusIds")
                        .HasForeignKey("ContractStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolidCRM.Models.ContractType", "ContractType_ContractTypeId")
                        .WithMany("Contract_ContractTypeIds")
                        .HasForeignKey("ContractTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SolidCRM.Models.FileManager", b =>
                {
                    b.HasOne("SolidCRM.Models.User", "User_UserId")
                        .WithMany("FileManager_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SolidCRM.Models.Invoice", b =>
                {
                    b.HasOne("SolidCRM.Models.ClientAddress", "ClientAddress_ClientAddressId")
                        .WithMany("Invoice_ClientAddressIds")
                        .HasForeignKey("ClientAddressId");

                    b.HasOne("SolidCRM.Models.Company", "Company_CompanyId")
                        .WithMany("Invoice_CompanyIds")
                        .HasForeignKey("CompanyId");

                    b.HasOne("SolidCRM.Models.Country", "Country_CountryId")
                        .WithMany("Invoice_CountryIds")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolidCRM.Models.PaymentMode", "PaymentMode_PaymentModeId")
                        .WithMany("Invoice_PaymentModeIds")
                        .HasForeignKey("PaymentModeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SolidCRM.Models.InvoiceItem", b =>
                {
                    b.HasOne("SolidCRM.Models.Invoice", "Invoice_InvoiceId")
                        .WithMany("InvoiceItem_InvoiceIds")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolidCRM.Models.QuantityUnit", "QuantityUnit_QuantityUnitId")
                        .WithMany("InvoiceItem_QuantityUnitIds")
                        .HasForeignKey("QuantityUnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SolidCRM.Models.Lead", b =>
                {
                    b.HasOne("SolidCRM.Models.User", "User_AssignedToUserId")
                        .WithMany("Lead_AssignedToUserIds")
                        .HasForeignKey("AssignedToUserId");

                    b.HasOne("SolidCRM.Models.Country", "Country_CountryId")
                        .WithMany("Lead_CountryIds")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolidCRM.Models.LeadStatus", "LeadStatus_LeadStatusId")
                        .WithMany("Lead_LeadStatusIds")
                        .HasForeignKey("LeadStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolidCRM.Models.Source", "Source_SourceId")
                        .WithMany("Lead_SourceIds")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SolidCRM.Models.LedgerAccount", b =>
                {
                    b.HasOne("SolidCRM.Models.Company", "Company_CompanyId")
                        .WithMany("LedgerAccount_CompanyIds")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolidCRM.Models.LedgerAccount", "LedgerAccount2")
                        .WithMany("LedgerAccount_ParentIds")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SolidCRM.Models.Menu", b =>
                {
                    b.HasOne("SolidCRM.Models.Menu", "Menu2")
                        .WithMany("Menu_ParentIds")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SolidCRM.Models.MenuPermission", b =>
                {
                    b.HasOne("SolidCRM.Models.Menu", "Menu_MenuId")
                        .WithMany("MenuPermission_MenuIds")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolidCRM.Models.Role", "Role_RoleId")
                        .WithMany("MenuPermission_RoleIds")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolidCRM.Models.User", "User_UserId")
                        .WithMany("MenuPermission_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SolidCRM.Models.NewsMedia", b =>
                {
                    b.HasOne("SolidCRM.Models.Blog", "Blog_BlogId")
                        .WithMany("NewsMedia_BlogIds")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SolidCRM.Models.Notes", b =>
                {
                    b.HasOne("SolidCRM.Models.User", "User_AddedByUserId")
                        .WithMany("Notes_AddedByUserIds")
                        .HasForeignKey("AddedByUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SolidCRM.Models.Project", b =>
                {
                    b.HasOne("SolidCRM.Models.CompanyClient", "CompanyClient_CompanyClientId")
                        .WithMany("Project_CompanyClientIds")
                        .HasForeignKey("CompanyClientId");

                    b.HasOne("SolidCRM.Models.Priority", "Priority_PriorityId")
                        .WithMany("Project_PriorityIds")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolidCRM.Models.Status", "Status_StatusId")
                        .WithMany("Project_StatusIds")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SolidCRM.Models.ProjectFile", b =>
                {
                    b.HasOne("SolidCRM.Models.FileManager", "FileManager_FileManagerId")
                        .WithMany("ProjectFile_FileManagerIds")
                        .HasForeignKey("FileManagerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolidCRM.Models.Project", "Project_ProjectId")
                        .WithMany("ProjectFile_ProjectIds")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SolidCRM.Models.ProjectMember", b =>
                {
                    b.HasOne("SolidCRM.Models.Project", "Project_ProjectId")
                        .WithMany("ProjectMember_ProjectIds")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolidCRM.Models.User", "User_UserId")
                        .WithMany("ProjectMember_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SolidCRM.Models.ProjectMileStone", b =>
                {
                    b.HasOne("SolidCRM.Models.Project", "Project_ProjectId")
                        .WithMany("ProjectMileStone_ProjectIds")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SolidCRM.Models.ProjectTask", b =>
                {
                    b.HasOne("SolidCRM.Models.ProjectTask", "ProjectTask2")
                        .WithMany("ProjectTask_ParentIds")
                        .HasForeignKey("ParentId");

                    b.HasOne("SolidCRM.Models.Priority", "Priority_PriorityId")
                        .WithMany("ProjectTask_PriorityIds")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolidCRM.Models.Project", "Project_ProjectId")
                        .WithMany("ProjectTask_ProjectIds")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolidCRM.Models.ProjectMileStone", "ProjectMileStone_ProjectMileStoneId")
                        .WithMany("ProjectTask_ProjectMileStoneIds")
                        .HasForeignKey("ProjectMileStoneId");

                    b.HasOne("SolidCRM.Models.Status", "Status_StatusId")
                        .WithMany("ProjectTask_StatusIds")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SolidCRM.Models.RoleUser", b =>
                {
                    b.HasOne("SolidCRM.Models.Role", "Role_RoleId")
                        .WithMany("RoleUser_RoleIds")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolidCRM.Models.User", "User_UserId")
                        .WithMany("RoleUser_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SolidCRM.Models.Ticket", b =>
                {
                    b.HasOne("SolidCRM.Models.CompanyClient", "CompanyClient_CompanyClientId")
                        .WithMany("Ticket_CompanyClientIds")
                        .HasForeignKey("CompanyClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolidCRM.Models.Company", "Company_CompanyId")
                        .WithMany("Ticket_CompanyIds")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolidCRM.Models.Priority", "Priority_PriorityId")
                        .WithMany("Ticket_PriorityIds")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolidCRM.Models.Status", "Status_StatusId")
                        .WithMany("Ticket_StatusIds")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SolidCRM.Models.TicketTask", b =>
                {
                    b.HasOne("SolidCRM.Models.Priority", "Priority_PriorityId")
                        .WithMany("TicketTask_PriorityIds")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolidCRM.Models.Status", "Status_StatusId")
                        .WithMany("TicketTask_StatusIds")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolidCRM.Models.Ticket", "Ticket_TicketId")
                        .WithMany("TicketTask_TicketIds")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SolidCRM.Models.Todo", b =>
                {
                    b.HasOne("SolidCRM.Models.User", "User_UserId")
                        .WithMany("Todo_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SolidCRM.Models.Transaction", b =>
                {
                    b.HasOne("SolidCRM.Models.Company", "Company_CompanyId")
                        .WithMany("Transaction_CompanyIds")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolidCRM.Models.LedgerAccount", "LedgerAccount_CreditLedgerAccountId")
                        .WithMany("Transaction_CreditLedgerAccountIds")
                        .HasForeignKey("CreditLedgerAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolidCRM.Models.LedgerAccount", "LedgerAccount_DebitLedgerAccountId")
                        .WithMany("Transaction_DebitLedgerAccountIds")
                        .HasForeignKey("DebitLedgerAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SolidCRM.Models.User", b =>
                {
                    b.HasOne("SolidCRM.Models.Direction", "Direction_DirectionId")
                        .WithMany("User_DirectionIds")
                        .HasForeignKey("DirectionId");

                    b.HasOne("SolidCRM.Models.Language", "Language_LanguageId")
                        .WithMany("User_LanguageIds")
                        .HasForeignKey("LanguageId");
                });
#pragma warning restore 612, 618
        }
    }
}
